name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aim_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd server
        npm ci
    
    - name: Run linting
      run: |
        cd server
        npm run lint || true
    
    - name: Type checking
      run: |
        cd server
        npm run type-check || true
    
    - name: Run unit tests
      run: |
        cd server
        npm run test:cov
      env:
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/aim_test
    
    - name: Run comprehensive test suite
      run: |
        cd server
        chmod +x scripts/run-tests.sh
        ./scripts/run-tests.sh
    
    - name: Run integration tests
      run: |
        cd server
        chmod +x scripts/acceptance_tests.sh
        ./scripts/acceptance_tests.sh || true
    
    - name: Run performance tests
      run: |
        cd server
        chmod +x scripts/performance-tests.sh
        ./scripts/performance-tests.sh || true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd server
        npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd server
        npm ci
    
    - name: Build application
      run: |
        cd server
        npm run build
    
    - name: Build Docker image
      run: |
        cd server
        docker build -t aim-currency:${{ github.sha }} .
        docker build -t aim-currency:latest .
    
    - name: Push to registry
      if: github.event_name == 'push'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push aim-currency:${{ github.sha }}
        docker push aim-currency:latest

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service gateway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
