
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  status: 'status',
  kind: 'kind',
  displayName: 'displayName',
  reputationScore: 'reputationScore',
  tpmAttested: 'tpmAttested'
};

exports.Prisma.BalanceScalarFieldEnum = {
  accountId: 'accountId',
  microAmount: 'microAmount',
  updatedAt: 'updatedAt'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  ts: 'ts',
  type: 'type',
  payload: 'payload',
  prevHash: 'prevHash',
  leafHash: 'leafHash',
  merkleRoot: 'merkleRoot',
  sigDilithium: 'sigDilithium',
  sigSphincs: 'sigSphincs',
  signerId: 'signerId'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  submitterAccountId: 'submitterAccountId',
  spec: 'spec',
  inputsHash: 'inputsHash',
  attestation: 'attestation',
  status: 'status',
  score: 'score',
  verifierReport: 'verifierReport',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PolicyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value'
};

exports.Prisma.CheckpointScalarFieldEnum = {
  id: 'id',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  merkleRoot: 'merkleRoot',
  witnessSigs: 'witnessSigs',
  objectStoreUri: 'objectStoreUri',
  publishedAt: 'publishedAt'
};

exports.Prisma.WitnessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pubkeyDilithium: 'pubkeyDilithium',
  pubkeySphincs: 'pubkeySphincs',
  active: 'active'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  ts: 'ts',
  usdBid: 'usdBid',
  usdAsk: 'usdAsk',
  basketQuote: 'basketQuote'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  submitterAccountId: 'submitterAccountId',
  reason: 'reason',
  evidence: 'evidence',
  status: 'status',
  resolution: 'resolution',
  reVerificationResult: 'reVerificationResult',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.OnrampIntentScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  crypto: 'crypto',
  amount: 'amount',
  aimAmount: 'aimAmount',
  depositAddress: 'depositAddress',
  txHash: 'txHash',
  confirmations: 'confirmations',
  memo: 'memo',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  confirmedAt: 'confirmedAt',
  completedAt: 'completedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AccountKind = exports.$Enums.AccountKind = {
  human: 'human',
  agent: 'agent',
  treasury: 'treasury'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  active: 'active',
  suspended: 'suspended',
  closed: 'closed'
};

exports.JournalType = exports.$Enums.JournalType = {
  mint: 'mint',
  transfer: 'transfer',
  adjust: 'adjust',
  demurrage: 'demurrage'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  submitted: 'submitted',
  scored: 'scored',
  minted: 'minted',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Balance: 'Balance',
  JournalEntry: 'JournalEntry',
  Job: 'Job',
  Policy: 'Policy',
  Checkpoint: 'Checkpoint',
  Witness: 'Witness',
  Quote: 'Quote',
  Dispute: 'Dispute',
  OnrampIntent: 'OnrampIntent'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/dani/Desktop/AICURRENCY/server/mintd/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/dani/Desktop/AICURRENCY/server/mintd/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "POSTGRES_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"POSTGRES_URL\")\n}\n\nenum AccountKind {\n  human\n  agent\n  treasury\n}\n\nenum AccountStatus {\n  active\n  suspended\n  closed\n}\n\nenum JournalType {\n  mint\n  transfer\n  adjust\n  demurrage\n}\n\nenum JobStatus {\n  submitted\n  scored\n  minted\n  rejected\n}\n\nmodel Account {\n  id              String        @id @default(uuid()) @db.Uuid\n  createdAt       DateTime      @default(now()) @map(\"created_at\") @db.Timestamptz\n  status          AccountStatus @default(active)\n  kind            AccountKind\n  displayName     String        @map(\"display_name\")\n  reputationScore Decimal       @default(0) @map(\"reputation_score\") @db.Decimal(10, 2)\n  tpmAttested     Boolean       @default(false) @map(\"tpm_attested\")\n\n  // Relations\n  balances       Balance[]\n  submittedJobs  Job[]          @relation(\"JobSubmitter\")\n  journalEntries JournalEntry[]\n\n  @@map(\"accounts\")\n}\n\nmodel Balance {\n  accountId   String   @id @map(\"account_id\") @db.Uuid\n  microAmount Decimal  @default(0) @map(\"micro_amount\") @db.Decimal(38, 0)\n  updatedAt   DateTime @default(now()) @updatedAt @map(\"updated_at\") @db.Timestamptz\n\n  // Relations\n  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)\n\n  @@map(\"balances\")\n}\n\nmodel JournalEntry {\n  id           String      @id @default(uuid()) @db.Uuid\n  ts           DateTime    @default(now()) @db.Timestamptz\n  type         JournalType\n  payload      Json\n  prevHash     Bytes       @map(\"prev_hash\")\n  leafHash     Bytes       @map(\"leaf_hash\")\n  merkleRoot   Bytes       @map(\"merkle_root\")\n  sigDilithium Bytes       @map(\"sig_dilithium\")\n  sigSphincs   Bytes       @map(\"sig_sphincs\")\n  signerId     String      @map(\"signer_id\")\n\n  // Relations\n  account Account @relation(fields: [signerId], references: [id])\n\n  @@index([ts])\n  @@index([type])\n  @@index([merkleRoot])\n  @@map(\"journal\")\n}\n\nmodel Job {\n  id                 String    @id @default(uuid()) @db.Uuid\n  submitterAccountId String    @map(\"submitter_account_id\") @db.Uuid\n  spec               Json\n  inputsHash         Bytes     @map(\"inputs_hash\")\n  attestation        Json?\n  status             JobStatus @default(submitted)\n  score              Float?\n  verifierReport     Json?     @map(\"verifier_report\")\n  createdAt          DateTime  @default(now()) @map(\"created_at\") @db.Timestamptz\n  updatedAt          DateTime  @default(now()) @updatedAt @map(\"updated_at\") @db.Timestamptz\n\n  // Relations\n  submitterAccount Account @relation(\"JobSubmitter\", fields: [submitterAccountId], references: [id])\n\n  @@index([status])\n  @@index([submitterAccountId])\n  @@index([createdAt])\n  @@map(\"jobs\")\n}\n\nmodel Policy {\n  id    String @id @default(uuid()) @db.Uuid\n  key   String @unique\n  value Json\n\n  @@map(\"policy\")\n}\n\nmodel Checkpoint {\n  id             String   @id @default(uuid()) @db.Uuid\n  periodStart    DateTime @map(\"period_start\") @db.Timestamptz\n  periodEnd      DateTime @map(\"period_end\") @db.Timestamptz\n  merkleRoot     Bytes    @map(\"merkle_root\")\n  witnessSigs    Json     @map(\"witness_sigs\")\n  objectStoreUri String   @map(\"object_store_uri\")\n  publishedAt    DateTime @default(now()) @map(\"published_at\") @db.Timestamptz\n\n  @@index([periodStart, periodEnd])\n  @@map(\"checkpoints\")\n}\n\nmodel Witness {\n  id              String  @id @default(uuid()) @db.Uuid\n  name            String  @unique\n  pubkeyDilithium Bytes   @map(\"pubkey_dilithium\")\n  pubkeySphincs   Bytes   @map(\"pubkey_sphincs\")\n  active          Boolean @default(true)\n\n  @@map(\"witnesses\")\n}\n\nmodel Quote {\n  id          String   @id @default(uuid()) @db.Uuid\n  ts          DateTime @default(now()) @db.Timestamptz\n  usdBid      Decimal  @map(\"usd_bid\") @db.Decimal(10, 4)\n  usdAsk      Decimal  @map(\"usd_ask\") @db.Decimal(10, 4)\n  basketQuote Json     @map(\"basket_quote\")\n\n  @@index([ts])\n  @@map(\"quotes\")\n}\n\nmodel Dispute {\n  id                   String    @id @default(uuid()) @db.Uuid\n  jobId                String    @map(\"job_id\") @db.Uuid\n  submitterAccountId   String    @map(\"submitter_account_id\") @db.Uuid\n  reason               String\n  evidence             Json?\n  status               String    @default(\"open\")\n  resolution           String?\n  reVerificationResult Json?     @map(\"re_verification_result\")\n  createdAt            DateTime  @default(now()) @map(\"created_at\") @db.Timestamptz\n  resolvedAt           DateTime? @map(\"resolved_at\") @db.Timestamptz\n\n  @@index([jobId])\n  @@index([submitterAccountId])\n  @@index([status])\n  @@index([createdAt])\n  @@map(\"disputes\")\n}\n\nmodel OnrampIntent {\n  id             String    @id @default(uuid()) @db.Uuid\n  accountId      String    @map(\"account_id\") @db.Uuid\n  crypto         String\n  amount         String\n  aimAmount      String    @map(\"aim_amount\")\n  depositAddress String    @map(\"deposit_address\")\n  txHash         String?   @map(\"tx_hash\")\n  confirmations  Int?      @default(0)\n  memo           String?\n  status         String    @default(\"pending\")\n  expiresAt      DateTime  @map(\"expires_at\") @db.Timestamptz\n  createdAt      DateTime  @default(now()) @map(\"created_at\") @db.Timestamptz\n  confirmedAt    DateTime? @map(\"confirmed_at\") @db.Timestamptz\n  completedAt    DateTime? @map(\"completed_at\") @db.Timestamptz\n\n  @@index([accountId])\n  @@index([status])\n  @@index([createdAt])\n  @@index([expiresAt])\n  @@map(\"onramp_intents\")\n}\n",
  "inlineSchemaHash": "f7c2363782f7c95a253f30c9a4a94c168eecf6896fc38244fc36306fd0879465",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AccountStatus\"},{\"name\":\"kind\",\"kind\":\"enum\",\"type\":\"AccountKind\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"display_name\"},{\"name\":\"reputationScore\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"reputation_score\"},{\"name\":\"tpmAttested\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"tpm_attested\"},{\"name\":\"balances\",\"kind\":\"object\",\"type\":\"Balance\",\"relationName\":\"AccountToBalance\"},{\"name\":\"submittedJobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobSubmitter\"},{\"name\":\"journalEntries\",\"kind\":\"object\",\"type\":\"JournalEntry\",\"relationName\":\"AccountToJournalEntry\"}],\"dbName\":\"accounts\"},\"Balance\":{\"fields\":[{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"account_id\"},{\"name\":\"microAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"micro_amount\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToBalance\"}],\"dbName\":\"balances\"},\"JournalEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ts\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"JournalType\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"prevHash\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"prev_hash\"},{\"name\":\"leafHash\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"leaf_hash\"},{\"name\":\"merkleRoot\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"merkle_root\"},{\"name\":\"sigDilithium\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"sig_dilithium\"},{\"name\":\"sigSphincs\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"sig_sphincs\"},{\"name\":\"signerId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"signer_id\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToJournalEntry\"}],\"dbName\":\"journal\"},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submitterAccountId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"submitter_account_id\"},{\"name\":\"spec\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"inputsHash\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"inputs_hash\"},{\"name\":\"attestation\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"verifierReport\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"verifier_report\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"submitterAccount\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"JobSubmitter\"}],\"dbName\":\"jobs\"},\"Policy\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":\"policy\"},\"Checkpoint\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"periodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"period_start\"},{\"name\":\"periodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"period_end\"},{\"name\":\"merkleRoot\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"merkle_root\"},{\"name\":\"witnessSigs\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"witness_sigs\"},{\"name\":\"objectStoreUri\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"object_store_uri\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"published_at\"}],\"dbName\":\"checkpoints\"},\"Witness\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pubkeyDilithium\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"pubkey_dilithium\"},{\"name\":\"pubkeySphincs\",\"kind\":\"scalar\",\"type\":\"Bytes\",\"dbName\":\"pubkey_sphincs\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":\"witnesses\"},\"Quote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ts\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"usdBid\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"usd_bid\"},{\"name\":\"usdAsk\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"usd_ask\"},{\"name\":\"basketQuote\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"basket_quote\"}],\"dbName\":\"quotes\"},\"Dispute\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"job_id\"},{\"name\":\"submitterAccountId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"submitter_account_id\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"evidence\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resolution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reVerificationResult\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"re_verification_result\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"resolvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"resolved_at\"}],\"dbName\":\"disputes\"},\"OnrampIntent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"account_id\"},{\"name\":\"crypto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aimAmount\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"aim_amount\"},{\"name\":\"depositAddress\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"deposit_address\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tx_hash\"},{\"name\":\"confirmations\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"memo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"confirmedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"confirmed_at\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"}],\"dbName\":\"onramp_intents\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    POSTGRES_URL: typeof globalThis !== 'undefined' && globalThis['POSTGRES_URL'] || typeof process !== 'undefined' && process.env && process.env.POSTGRES_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

