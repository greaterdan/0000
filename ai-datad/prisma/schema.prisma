generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AI Data Marketplace Tables
model AIDataProduct {
  id                String   @id @default(uuid())
  creatorId         String   @map("creator_id")
  name              String
  description       String?
  dataType          String   @map("data_type") // text, image, audio, video, tabular, multimodal
  category          String   // nlp, computer_vision, audio_processing, etc.
  size              BigInt   // bytes
  recordCount       Int      @map("record_count")
  costAIM           BigInt   @map("cost_aim") // AIM tokens to purchase
  isPublic          Boolean  @map("is_public") @default(false)
  isActive          Boolean  @map("is_active") @default(true)
  downloadUrl       String?  @map("download_url")
  previewUrl        String?  @map("preview_url")
  metadata          Json?    // Schema, labels, quality metrics, etc.
  tags              String[] @default([])
  license           String?  // Commercial, research, open, custom
  usageCount        Int      @map("usage_count") @default(0)
  rating            Decimal? @db.Decimal(3, 2) // 0.00 to 5.00
  totalEarnings     BigInt   @map("total_earnings") @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  creator           Account  @relation(fields: [creatorId], references: [id])
  purchases         AIDataPurchase[]
  reviews           AIDataReview[]

  @@map("ai_data_products")
}

// AI Data Purchases
model AIDataPurchase {
  id                String   @id @default(uuid())
  buyerId           String   @map("buyer_id")
  dataProductId     String   @map("data_product_id")
  costAIM           BigInt   @map("cost_aim") // AIM tokens spent
  downloadUrl       String?  @map("download_url") // Unique download link
  downloadExpiry    DateTime? @map("download_expiry")
  downloadCount     Int      @map("download_count") @default(0)
  maxDownloads      Int      @map("max_downloads") @default(5)
  isActive          Boolean  @map("is_active") @default(true)
  purchasedAt       DateTime @default(now()) @map("purchased_at")

  // Relations
  buyer             Account  @relation(fields: [buyerId], references: [id])
  dataProduct       AIDataProduct @relation(fields: [dataProductId], references: [id])

  @@map("ai_data_purchases")
}

// AI Data Reviews
model AIDataReview {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  dataProductId     String   @map("data_product_id")
  rating            Decimal  @db.Decimal(3, 2) // 0.00 to 5.00
  comment           String?
  quality           Decimal? @db.Decimal(3, 2) // Data quality rating
  completeness      Decimal? @db.Decimal(3, 2) // Data completeness rating
  accuracy          Decimal? @db.Decimal(3, 2) // Data accuracy rating
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              Account  @relation(fields: [userId], references: [id])
  dataProduct       AIDataProduct @relation(fields: [dataProductId], references: [id])

  @@unique([userId, dataProductId])
  @@map("ai_data_reviews")
}

// AI Data Categories
model AIDataCategory {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String?
  parentId          String?  @map("parent_id")
  isActive          Boolean  @map("is_active") @default(true)
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  parent            AIDataCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          AIDataCategory[] @relation("CategoryHierarchy")
  dataProducts      AIDataProduct[]

  @@map("ai_data_categories")
}

// AI Data Quality Metrics
model AIDataQuality {
  id                String   @id @default(uuid())
  dataProductId     String   @map("data_product_id")
  metric            String   // completeness, accuracy, consistency, validity
  value             Decimal  @db.Decimal(5, 4) // 0.0000 to 1.0000
  description       String?
  calculatedAt      DateTime @default(now()) @map("calculated_at")

  // Relations
  dataProduct       AIDataProduct @relation(fields: [dataProductId], references: [id])

  @@unique([dataProductId, metric])
  @@map("ai_data_quality")
}

// Account relation (extends existing accounts table)
model Account {
  id                String        @id @default(uuid())
  displayName       String        @map("display_name")
  kind              String        // human, agent, treasury
  createdAt         DateTime      @default(now()) @map("created_at")

  // Relations
  dataProducts      AIDataProduct[]
  dataPurchases     AIDataPurchase[]
  dataReviews       AIDataReview[]

  @@map("accounts")
}
