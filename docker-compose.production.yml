version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: aim-postgres
    environment:
      POSTGRES_DB: aim_production
      POSTGRES_USER: aim_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/sql:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aim_user -d aim_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis
  redis:
    image: redis:7-alpine
    container_name: aim-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NATS
  nats:
    image: nats:2.10-alpine
    container_name: aim-nats
    command: ["--jetstream", "--store_dir", "/data", "--max_payload", "8MB", "--max_pending", "256MB"]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    healthcheck:
      test: ["CMD", "nats", "server", "check", "jetstream"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: aim-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: https://minio.aim-currency.com
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Gateway Service
  gateway:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-gateway:${DOCKER_IMAGE_TAG}
    container_name: aim-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - CLUSTER_MODE=true
      - WORKERS=4
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Ledger Service
  ledgerd:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-ledgerd:${DOCKER_IMAGE_TAG}
    container_name: aim-ledgerd
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Mint Service
  mintd:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-mintd:${DOCKER_IMAGE_TAG}
    container_name: aim-mintd
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Treasury Service
  treasury:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-treasury:${DOCKER_IMAGE_TAG}
    container_name: aim-treasury
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Agent Gateway Service
  agent-gateway:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-agent-gateway:${DOCKER_IMAGE_TAG}
    container_name: aim-agent-gateway
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
      pqsigner:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PQ Signer Service
  pqsigner:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-pqsigner:${DOCKER_IMAGE_TAG}
    container_name: aim-pqsigner
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=info
    env_file:
      - ./config/production.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Disputes Service
  disputes:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-disputes:${DOCKER_IMAGE_TAG}
    container_name: aim-disputes
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # On-Ramp Service
  onramp:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-onramp:${DOCKER_IMAGE_TAG}
    container_name: aim-onramp
    ports:
      - "3013:3013"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Verifier Advanced Service
  verifier-advanced:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-verifier-advanced:${DOCKER_IMAGE_TAG}
    container_name: aim-verifier-advanced
    ports:
      - "3014:3014"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Metering Service
  metering:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-metering:${DOCKER_IMAGE_TAG}
    container_name: aim-metering
    ports:
      - "3015:3015"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Webhook Service
  webhookd:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-webhookd:${DOCKER_IMAGE_TAG}
    container_name: aim-webhookd
    ports:
      - "3016:3016"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Log Service
  logd:
    image: ${DOCKER_REGISTRY}/${SERVICE_NAME}-logd:${DOCKER_IMAGE_TAG}
    container_name: aim-logd
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
    env_file:
      - ./config/production.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: aim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - aim-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  minio_data:
    driver: local

networks:
  aim-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
